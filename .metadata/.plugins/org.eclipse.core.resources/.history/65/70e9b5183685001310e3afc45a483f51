
public class SynchronizedCounter extends Thread
{
	private int count = 0;
	private int syncCount = 0;
	
	public void increment()
	{
		count ++;
	}
	
	public void decrement()
	{
		count --;
	}
	
	public int getCount()
	{
		return count;
	}
	
	public void synchIncrement()
	{
		syncCount ++;
	}
	
	public synchronized void synchDecrement()
	{
		syncCount --;
	}
	
	public synchronized int getSyncCount()
	{
		return syncCount;
	}
	
	public static void main(String[] args) 
	{
		SynchronizedCounter threadA = new SynchronizedCounter();
		SynchronizedCounter threadB = new SynchronizedCounter();
		
		threadA.increment();
		threadB.decrement();
		System.out.println("threadA with id " + threadA.getId() + " has count " + threadA.getCount());
		System.out.println("threadB with id " + threadB.getId() + " has count " + threadB.getCount());
		
		SynchronizedCounter threadC = new SynchronizedCounter();
		SynchronizedCounter threadD = new SynchronizedCounter();
		
		threadC.synchIncrement();
		threadD.synchDecrement();
		
		try { // we have to wait until both threads complete their execution
			threadC.join();
			threadD.join();
		} catch (InterruptedException e) {
		    System.out.println("Interrupt:" + e.getMessage());
		}
		
		System.out.println("threadC with id " + threadC.getId() + " has synched count " + threadC.getSyncCount());
		System.out.println("threadD with id " + threadD.getId() + " has synched count " + threadD.getSyncCount());
	}
	
}
